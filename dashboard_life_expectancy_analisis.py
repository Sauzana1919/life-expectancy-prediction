# -*- coding: utf-8 -*-
"""Dashboard_Life_Expectancy_Analisis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qWjX0b-qnoEVmU_wGirAODjYTxLbtCYP
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Baca file
df = pd.read_csv('Life Expectancy Data.csv')

# Bersihkan spasi di nama kolom
df.columns = df.columns.str.strip()

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Baca dataset
df = pd.read_csv('Life Expectancy Data.csv')
df.columns = df.columns.str.strip()  # Hapus spasi
df = df.fillna(df.median(numeric_only=True))  # Isi NaN

# Pilih fitur dan target
X = df[['Schooling', 'GDP', 'BMI', 'Alcohol']]
y = df['Life expectancy']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Latih model
model = LinearRegression()
model.fit(X_train, y_train)

import joblib
joblib.dump(model, 'model_regresi.pkl')

!pip install streamlit pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# st.title("Prediksi Harapan Hidup (Life Expectancy)")
# 
# st.markdown("Masukkan nilai indikator berikut untuk memprediksi harapan hidup:")
# 
# # Input dari pengguna
# schooling = st.slider("Tingkat Pendidikan (Schooling)", 0.0, 20.0, 12.0)
# gdp = st.number_input("GDP per Kapita", value=4000.0)
# bmi = st.slider("Indeks Massa Tubuh (BMI)", 10.0, 40.0, 22.0)
# alcohol = st.slider("Konsumsi Alkohol", 0.0, 15.0, 5.0)
# 
# # Load model regresi
# model = joblib.load("model_regresi.pkl")
# 
# # Prediksi jika tombol ditekan
# if st.button("Prediksi Harapan Hidup"):
#     data = pd.DataFrame({
#         "Schooling": [schooling],
#         "GDP": [gdp],
#         "BMI": [bmi],
#         "Alcohol": [alcohol]
#     })
#     pred = model.predict(data)[0]
#     st.success(f"Perkiraan Harapan Hidup: {pred:.2f} tahun")
#

!ngrok config add-authtoken 30KHV10zqIh2vncbacOYuMfsL3f_4CLVkiUBkx5oBr3jRoZuY

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# st.title("Prediksi Harapan Hidup")
# 
# schooling = st.slider("Schooling", 0.0, 20.0, 12.0)
# gdp = st.number_input("GDP", value=5000.0)
# bmi = st.slider("BMI", 10.0, 40.0, 22.0)
# alcohol = st.slider("Alcohol", 0.0, 15.0, 5.0)
# 
# model = joblib.load("model_regresi.pkl")
# 
# if st.button("Prediksi"):
#     data = pd.DataFrame({
#         "Schooling": [schooling],
#         "GDP": [gdp],
#         "BMI": [bmi],
#         "Alcohol": [alcohol]
#     })
#     pred = model.predict(data)[0]
#     st.success(f"Harapan hidup diprediksi: {pred:.2f} tahun")
#

!pip install streamlit joblib

import joblib
joblib.dump(model, 'model_regresi.pkl')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# st.title("Prediksi Harapan Hidup")
# 
# schooling = st.slider("Schooling", 0.0, 20.0, 12.0)
# gdp = st.number_input("GDP", value=5000.0)
# bmi = st.slider("BMI", 10.0, 40.0, 22.0)
# alcohol = st.slider("Alcohol", 0.0, 15.0, 5.0)
# 
# model = joblib.load("model_regresi.pkl")
# 
# if st.button("Prediksi"):
#     data = pd.DataFrame({
#         "Schooling": [schooling],
#         "GDP": [gdp],
#         "BMI": [bmi],
#         "Alcohol": [alcohol]
#     })
#     pred = model.predict(data)[0]
#     st.success(f"Prediksi Harapan Hidup: {pred:.2f} tahun")
#

!ngrok config add-authtoken 30KHV10zqIh2vncbacOYuMfsL3f_4CLVkiUBkx5oBr3jRoZuY

from pyngrok import ngrok

public_url = ngrok.connect(addr="8501", proto="http")
!streamlit run app.py &

print("✅ Dashboard bisa diakses di:", public_url)

!pip install streamlit pyngrok==4.1.1 -q

!nohup streamlit run app.py --server.port 8501 > /dev/null 2>&1 &

import time
time.sleep(15)

from pyngrok import ngrok
public_url = ngrok.connect(8501)
print("✅ Dashboard bisa diakses di:", public_url)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# streamlit
# pandas
# joblib
# scikit-learn
#